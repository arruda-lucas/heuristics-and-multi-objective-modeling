import random
from collections import Counter

def generate_neighbors(state):
    neighbors = []
    for col in range(len(state)):
        for row in range(len(state)):
            if state[col] != row:
                neighbor = state.copy()
                neighbor[col] = row
                neighbors.append(neighbor)
    return neighbors

#Exemplo de uso:
initial_state = [random.randint(0, 7) for _ in range(8)]

def count_repetitions(state):
    somas = []  
    for i in range(1, len(state) + 1):
        somas.append(state[i - 1] + i)

    contagem_horizontal = Counter(state)  #Conta quantas vezes cada número aparece na lista de estado inicial
    contagem = Counter(somas)  #Conta quantas vezes cada número aparece na lista das somas de números de linha e coluna

    repetidos_horizontal = {key: value for key, value in contagem_horizontal.items() if value > 1}  #Filtra os números que aparecem mais de uma vez
    repetidos = {key: value for key, value in contagem.items() if value > 1}  #Filtra os números que aparecem mais de uma vez

    choque_rainhas_diagonal = sum((value - 1) for value in repetidos.values())  #Calcula a quantidade de pares de rainhas que se atacam na diagonal
    choque_rainhas_horizontal = sum((value - 1) for value in repetidos_horizontal.values())  #Calcula a quantidade de pares de rainhas que se atacam na horizontal
    
    return contagem_horizontal, contagem, repetidos_horizontal, repetidos, choque_rainhas_horizontal, choque_rainhas_diagonal

#Obter contagens relevantes
contagem_horizontal, contagem, repetidos_horizontal, repetidos, choque_rainhas_horizontal, choque_rainhas_diagonal = count_repetitions(initial_state)

#Gerar os vizinhos
neighbors = generate_neighbors(initial_state)

#Exibição
print("\nEstado inicial:", initial_state)
print("\nContagem de valores de número de linha + coluna:", contagem)
print("\nContagem de valores do estado inicial:", contagem_horizontal)
#print("\nValores repetidos e suas ocorrências:", repetidos_horizontal)
#print(f"\nQuantidade de números repetidos: {len(repetidos_horizontal)}")   #Essa quantidade é realmente igual ao número de choques entre rainhas? VERIFICAR!
#print("\nValores repetidos e suas ocorrências:", repetidos)
#print(f"\nQuantidade de números repetidos: {len(repetidos)}")   #Essa quantidade é realmente igual ao número de choques entre rainhas? VERIFICAR!
print(f"\nQuantidade de pares de rainhas que se atacam na horizontal: {choque_rainhas_horizontal}")  #Outra forma, está certa?
print(f"\nQuantidade de pares de rainhas que se atacam na diagonal: {choque_rainhas_diagonal}")  #Outra forma, está certa?
print("\nVizinhos gerados:", neighbors)
